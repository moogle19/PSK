(defun liesDatei (datei)
  (let ((stream (open datei))
       (liste (list '0)))
       (loop (setf zahl (read stream NIL))
             (if (eq zahl NIL)
                 (return (if (close stream) liste))
             )
             (push zahl liste)
       )
  )
)

(defun summe (liste)
  (cond ((equal (cdr liste) NIL) (car liste))
        (T (+ (car liste) (summe (cdr liste))))
  )  
)

(defun anz (liste)
  (cond ((equal liste '()) 0)
        ((equal (cdr liste) NIL) 1)
        (T (+ 1 (anz (cdr liste))))
  )  
)

(defun durchschnitt (datei)
  (setf liste (liesDatei datei)) 
  (setf divisor (anz liste))
  (if (equal divisor 0) 0 (/ (summe liste) divisor))
)
